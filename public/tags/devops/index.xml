<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Salman Ali Banani</title>
    <link>https://salmanalibanani.netlify.app/tags/devops/</link>
    <description>Recent content in DevOps on Salman Ali Banani</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020 Salman Ali Banani.</copyright>
    <lastBuildDate>Tue, 14 Jul 2020 23:20:56 +1000</lastBuildDate>
    
	<atom:link href="https://salmanalibanani.netlify.app/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pushing Secrets Into Azure Key Vault Directly From Arm Template</title>
      <link>https://salmanalibanani.netlify.app/2020/07/14/pushing-secrets-into-azure-key-vault-directly-from-arm-template/</link>
      <pubDate>Tue, 14 Jul 2020 23:20:56 +1000</pubDate>
      
      <guid>https://salmanalibanani.netlify.app/2020/07/14/pushing-secrets-into-azure-key-vault-directly-from-arm-template/</guid>
      <description>Azure Key Vault is a service that you can use to store application secrets and keys. You can store tokens, connection strings, certificates, API keys etc. in a Key Vault, and it provides a secured location with all usual safegaurds (encryption, access control etc.) that you would expect from such a solution.
In a previos post, I showed a simple technique to store the access credentials of a resource (e.</description>
    </item>
    
    <item>
      <title>Storing Secrets in Azure Key Vault from Azure Devops Release Pipeline</title>
      <link>https://salmanalibanani.netlify.app/2020/07/09/storing-secrets-in-azure-key-vault-from-azure-devops-release-pipeline/</link>
      <pubDate>Thu, 09 Jul 2020 00:32:31 +1000</pubDate>
      
      <guid>https://salmanalibanani.netlify.app/2020/07/09/storing-secrets-in-azure-key-vault-from-azure-devops-release-pipeline/</guid>
      <description>Azure Key Vault is a service that you can use to store application secrets and keys. You can store tokens, connection strings, certificates, API keys etc. in a Key Vault, and it provides a secured location with all usual safegaurds (encryption, access control etc.) that you would expect from such a solution. You would also expect that such solution should be easy to integrate with your build/release pipelines. Azure Key Vault turns out to be an obvious option if Azure happens to be your platform of choice.</description>
    </item>
    
  </channel>
</rss>